import { useEffect, useState } from "react";import useAddresses from "./useAddresses";import { useWeb3React } from "@web3-react/core";import { ethers } from 'ethers'const usePerpsEventLogs = (tickerAddress, vaultAddress) => {  const ADDRESSES = useAddresses(vaultAddress);  const { account, library } = useWeb3React()  const topic = '0xa5808818cc29542869d3e14410861007c2f8b874237d3a996c5319b2fe18a4c9' // BuyOptions(...)  const apiKey = 'BYUIRGM2YBGEM36ZSC7PWW7DTAP8FY2KIW'  const url = library ?     'https://api.arbiscan.io/api?module=logs&action=getLogs&fromBlock=67050855&toBlock='+library._fastBlockNumber      +'&address='+ADDRESSES['optionsPositionManager']      +'&topic0='+topic      +'&topic0_1_opr=and'      +'&topic1=0x000000000000000000000000'+account.substring(2,42)      +'&topic1_2_opr=and'      +(tickerAddress ? '&topic2=0x000000000000000000000000'+tickerAddress.substring(2,42) : '' )      +'&apikey='+apiKey     : undefined    const [data, setdata] = useState({});  const [error, seterror] = useState("");    useEffect(() => {    if (!tickerAddress) return;    fetch(url)      .then((res) => res.json())      .then(async (data) => {        if (data.result && data.result.length > 0 ){          let receipt = await library.getTransactionReceipt(data.result[data.result.length-1].transactionHash)          let hasSwapped = false          let token0Amount = 0          let token1Amount = 0          for (let log of receipt.logs){            if (log.topics[0] == "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822" ) hasSwapped = true; // swap topic            if (log.topics[0] == "0xde6857219544bb5b7746f48ed30be6386fefc61b2f864cacf559893bf50fd951" ) {              let amount = Number("0x" + log.data.substring(66, 130) )              if ( '0x'+log.topics[1].substring(26, 66) == ADDRESSES.lendingPools[0].token0.address.toLowerCase() ) token0Amount = amount              if ( '0x'+log.topics[1].substring(26, 66) == ADDRESSES.lendingPools[0].token1.address.toLowerCase() ) token1Amount = amount            }          }          let res = data.result[0]          res.hasSwapped = hasSwapped          res.token0Amount = token0Amount          res.token1Amount = token1Amount          setdata(res)        }        else {          seterror(data.error)        }      })  }, [tickerAddress]);  return data;}export default usePerpsEventLogs;